from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import os

# Recupera il token dalle variabili ambiente
TOKEN = os.getenv("TOKEN")

# Comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéâ Benvenuto! Usa /asta NomeGiocatore per iniziare un'asta.")

# Comando /asta
async def asta(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó Scrivi il nome del giocatore dopo /asta")
        return

    giocatore = " ".join(context.args)
    keyboard = [
        [InlineKeyboardButton("+1", callback_data='1'),
         InlineKeyboardButton("+2", callback_data='2'),
         InlineKeyboardButton("+5", callback_data='5')],
        [InlineKeyboardButton("+10", callback_data='10'),
         InlineKeyboardButton("+20", callback_data='20'),
         InlineKeyboardButton("+50", callback_data='50')],
        [InlineKeyboardButton("üö™ LASCIO", callback_data='leave')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üèÅ Asta per *{giocatore}* iniziata!",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# Gestione dei pulsanti
async def handle_bid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user.first_name
    action = query.data

    if action == "leave":
        await query.edit_message_text(f"{user} ha lasciato l'asta.")
    else:
        await query.edit_message_text(f"{user} rilancia di {action} crediti!")

# Avvio del bot
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("asta", asta))
app.add_handler(CallbackQueryHandler(handle_bid))
app.run_polling()
